DROP SEQUENCE SIM_Department_seq ; 
create sequence SIM_Department_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SIM_Department_PK_trig 
before insert on SIM_Department
for each row 
begin 
select SIM_Department_seq.nextval into :new.dept_id from dual; 
end; 
/
alter table SIM_Department add created date ; 
alter table SIM_Department add created_by VARCHAR2 (255) ; 
alter table SIM_Department add row_version_number integer ; 
alter table SIM_Department add updated date ; 
alter table SIM_Department add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SIM_Department_AUD_trig 
before insert or update on SIM_Department 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SIM_Person_seq ; 
create sequence SIM_Person_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SIM_Person_PK_trig 
before insert on SIM_Person
for each row 
begin 
select SIM_Person_seq.nextval into :new.person_id from dual; 
end; 
/
alter table SIM_Person add created date ; 
alter table SIM_Person add created_by VARCHAR2 (255) ; 
alter table SIM_Person add row_version_number integer ; 
alter table SIM_Person add updated date ; 
alter table SIM_Person add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SIM_Person_AUD_trig 
before insert or update on SIM_Person 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SIM_Project_seq ; 
create sequence SIM_Project_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SIM_Project_PK_trig 
before insert on SIM_Project
for each row 
begin 
select SIM_Project_seq.nextval into :new.project_id from dual; 
end; 
/
alter table SIM_Project add created date ; 
alter table SIM_Project add created_by VARCHAR2 (255) ; 
alter table SIM_Project add row_version_number integer ; 
alter table SIM_Project add updated date ; 
alter table SIM_Project add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SIM_Project_AUD_trig 
before insert or update on SIM_Project 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

-- Table SIM_project_person has a compound primary key so no sequence or trigger was created for it.
DROP INDEX SIM_Project_project_id_FK_0 ;
CREATE INDEX SIM_Project_project_id_FK_0 ON SIM_project_person(SIM_Project_project_id) ;
DROP INDEX SIM_Person_person_id_FK_1 ;
CREATE INDEX SIM_Person_person_id_FK_1 ON SIM_project_person(SIM_Person_person_id) ;
DROP INDEX SIM_Department_dept_id_FK_2 ;
CREATE INDEX SIM_Department_dept_id_FK_2 ON SIM_Person(SIM_Department_dept_id) ;
DROP INDEX SIM_Department_dept_id_FK_3 ;
CREATE INDEX SIM_Department_dept_id_FK_3 ON SIM_Person(SIM_Department_dept_id2) ;
DROP INDEX SIM_Department_dept_id_FK_4 ;
CREATE INDEX SIM_Department_dept_id_FK_4 ON SIM_Project(SIM_Department_dept_id) ;
